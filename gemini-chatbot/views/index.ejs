<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rule VietNam</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <div class="container">
        <!-- Sidebar -->
        <div class="sidebar">
            <!-- Header v·ªõi logo -->
            <div class="sidebar-header">
                <img src="logo.png" alt="Logo" class="logo">
                <h1 class="header-title">Rule VietNam</h1>
            </div>
            
            <!-- Menu Box -->
            <div class="sidebar-box">
                <h2 class="sidebar-title">Menu</h2>
                <ul class="sidebar-list">
                    <li>ChatGPT</li>
                    <li>PDF Translator</li>
                    <li>Copy Writing AI</li>
                    <li>Kh√°m ph√° GPT</li>
                </ul>
            </div>
            
            <!-- History Box -->
            <div class="sidebar-box">
                <h3 class="sidebar-history-title">L·ªãch s·ª≠</h3>
                <div class="chat-history">
                    <ul class="sidebar-list">
                        <li>H√¥m nay</li>
                        <li>H√¥m qua</li>
                        <li>7 ng√†y tr∆∞·ªõc ƒë√≥</li>
                    </ul>
                </div>
            </div>
            
            <!-- User Information and Settings -->
            <div class="sidebar-user">
                <div class="user-info">
                    <p class="user-name">Nguy·ªÖn Vinh ƒê·∫°t</p>
                    <a href="#" class="settings-link">C√†i ƒë·∫∑t</a>
                </div>
            </div>
        </div>

        <!-- Main Chat Area -->
        <div class="main">
            <div class="header">
                <span class="greeting">Ch√†o Nguy·ªÖn Vinh ƒê·∫°t! H√¥m nay b·∫°n c·∫ßn h·ªó tr·ª£ g√¨? üòä</span>
                <div class="actions">
                    <button class="btn share-btn">Chia s·∫ª</button>
                    <button class="btn lang-btn">EN</button>
                </div>
            </div>
            
            <div class="chat-area" id="chatbox"></div>
            
            <div class="chat-input-container">
                <input type="text" class="chat-input" id="userInput" placeholder="Nh·∫≠p tin nh·∫Øn...">
                <button class="btn send-btn" id="sendButton">‚¨Ü</button>
            </div>
            
            <div class="footer-note">ChatGPT c√≥ th·ªÉ m·∫Øc l·ªói. H√£y ki·ªÉm tra c√°c th√¥ng tin quan tr·ªçng.</div>
        </div>
    </div>

    <script src="/js/script.js"></script>
    
    <script>
        const chatbox = document.getElementById('chatbox');
        const userInput = document.getElementById('userInput');
        const sendButton = document.getElementById('sendButton');

        function convertMarkdownToHtml(text) {
            // T√°ch vƒÉn b·∫£n th√†nh c√°c d√≤ng
            let lines = text.split('\n');
            
            // X·ª≠ l√Ω t·ª´ng d√≤ng
            lines = lines.map(line => {
                // X·ª≠ l√Ω ti√™u ƒë·ªÅ (d√≤ng c√≥ d·∫•u ** ·ªü ƒë·∫ßu v√† cu·ªëi)
                if (line.startsWith('*') && line.endsWith('*')) {
                    return `<h3>${line.replace(/\*+/g, '')}</h3>`;
                }
                return line;
            });
            
            // N·ªëi c√°c d√≤ng l·∫°i v·ªõi nhau
            text = lines.join('<br>');
            
            // X·ª≠ l√Ω bold text ·ªü gi·ªØa vƒÉn b·∫£n
            text = text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
            
            return text;
        }

        function addMessageToChatbox(message, sender) {
            const messageElement = document.createElement('div');
            messageElement.classList.add('chat-message', sender === 'user' ? 'user' : 'bot');
            
            if (sender === 'bot') {
                const formattedMessage = convertMarkdownToHtml(message);
                messageElement.innerHTML = formattedMessage;
            } else {
                messageElement.textContent = message;
            }
            
            chatbox.appendChild(messageElement);
            chatbox.scrollTop = chatbox.scrollHeight;
        }

        function addThinkingMessage() {
            const thinkingElement = document.createElement('div');
            thinkingElement.classList.add('chat-message', 'bot', 'thinking-message');
            thinkingElement.textContent = 'ƒêang suy nghƒ©...';
            chatbox.appendChild(thinkingElement);
            chatbox.scrollTop = chatbox.scrollHeight;
            return thinkingElement;
        }

        let chatHistory = [];
        let currentTopic = ''; // Bi·∫øn l∆∞u ch·ªß ƒë·ªÅ hi·ªán t·∫°i

        function detectTopic(message) {
            // L·∫•y c√¢u ƒë·∫ßu ti√™n l√†m ch·ªß ƒë·ªÅ
            const firstLine = message.split('\n')[0];
            // Lo·∫°i b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát v√† d·∫•u *
            return firstLine.replace(/[*]/g, '').trim();
        }

        async function sendMessage() {
            const message = userInput.value;
            if (message.trim() !== '') {
                userInput.disabled = true;
                sendButton.disabled = true;
                
                addMessageToChatbox(message, 'user');
                userInput.value = '';
                
                const thinkingMessage = addThinkingMessage();
                
                try {
                    const response = await fetch('/sendMessage', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ message }),
                    });
                    
                    thinkingMessage.remove();
                    
                    const data = await response.json();
                    if (data.message) {
                        addMessageToChatbox(data.message, 'bot');
                        
                        // C·∫≠p nh·∫≠t ch·ªß ƒë·ªÅ n·∫øu l√† c√¢u h·ªèi m·ªõi
                        if (!currentTopic) {
                            currentTopic = detectTopic(data.message);
                            updateChatHistory(currentTopic);
                        }
                    }
                } catch (error) {
                    thinkingMessage.remove();
                    console.error('Error:', error);
                    addMessageToChatbox('C√≥ l·ªói x·∫£y ra khi g·ª≠i tin nh·∫Øn', 'bot');
                } finally {
                    userInput.disabled = false;
                    sendButton.disabled = false;
                    userInput.focus();
                }
            }
        }

        function updateChatHistory(topic) {
            if (!topic) return;
            
            const historyList = document.querySelector('.chat-history .sidebar-list');
            const today = new Date().toLocaleDateString('vi-VN');
            
            // Ki·ªÉm tra xem ƒë√£ c√≥ m·ª•c cho ng√†y h√¥m nay ch∆∞a
            let todayGroup = historyList.querySelector(`[data-date="${today}"]`);
            if (!todayGroup) {
                // T·∫°o nh√≥m m·ªõi cho ng√†y h√¥m nay
                const dateItem = document.createElement('li');
                dateItem.textContent = 'H√¥m nay';
                dateItem.setAttribute('data-date', today);
                historyList.insertBefore(dateItem, historyList.firstChild);
                todayGroup = dateItem;
            }
            
            // Th√™m ch·ªß ƒë·ªÅ m·ªõi
            const topicItem = document.createElement('li');
            topicItem.textContent = topic;
            topicItem.style.paddingLeft = '20px';
            topicItem.style.fontSize = '0.9em';
            topicItem.style.cursor = 'pointer';
            
            // Th√™m v√†o sau nh√≥m ng√†y
            if (todayGroup.nextSibling) {
                historyList.insertBefore(topicItem, todayGroup.nextSibling);
            } else {
                historyList.appendChild(topicItem);
            }
            
            // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng ch·ªß ƒë·ªÅ hi·ªÉn th·ªã
            const maxTopics = 10;
            const topics = historyList.querySelectorAll('li:not([data-date])');
            if (topics.length > maxTopics) {
                historyList.removeChild(topics[topics.length - 1]);
            }
        }

        // Th√™m h√†m ƒë·ªÉ b·∫Øt ƒë·∫ßu ch·ªß ƒë·ªÅ m·ªõi
        function startNewTopic() {
            currentTopic = '';
            // C√≥ th·ªÉ th√™m logic kh√°c khi b·∫Øt ƒë·∫ßu ch·ªß ƒë·ªÅ m·ªõi
        }

        // Th√™m n√∫t "Ch·ªß ƒë·ªÅ m·ªõi" v√†o sidebar
        const sidebarBox = document.querySelector('.sidebar-box');
        const newTopicButton = document.createElement('button');
        newTopicButton.textContent = 'Ch·ªß ƒë·ªÅ m·ªõi';
        newTopicButton.className = 'new-topic-btn';
        newTopicButton.onclick = startNewTopic;
        sidebarBox.appendChild(newTopicButton);

        // Th√™m style cho n√∫t
        const style = document.createElement('style');
        style.textContent += `
            .new-topic-btn {
                width: 100%;
                padding: 8px;
                margin-top: 10px;
                background-color: #3498db;
                color: white;
                border: none;
                border-radius: 5px;
                cursor: pointer;
            }
            
            .new-topic-btn:hover {
                background-color: #2980b9;
            }
        `;
        document.head.appendChild(style);

        // Kh·ªüi t·∫°o l·ªãch s·ª≠ chat khi t·∫£i trang
        window.addEventListener('load', updateChatHistory);

        sendButton.addEventListener('click', sendMessage);
        userInput.addEventListener('keypress', (event) => {
            if (event.key === 'Enter') {
                sendMessage();
            }
        });

        // Th√™m style cho thinking message
        const thinkingStyle = document.createElement('style');
        thinkingStyle.textContent = `
            .thinking-message {
                opacity: 0.7;
                font-style: italic;
            }
            
            @keyframes thinking {
                0% { content: ''; }
                25% { content: '.'; }
                50% { content: '..'; }
                75% { content: '...'; }
            }
            
            .thinking-message::after {
                content: '';
                display: inline-block;
                animation: thinking 1.5s infinite;
            }
        `;
        document.head.appendChild(thinkingStyle);

        // Th√™m CSS cho tin nh·∫Øn bot
        const messageStyle = document.createElement('style');
        messageStyle.textContent = `
            .bot-message {
                white-space: pre-wrap;
                word-wrap: break-word;
                line-height: 1.5;
            }
            
            .bot-message h3 {
                margin: 0 0 10px 0;
                font-size: 1.2em;
                color: #2c3e50;
            }
            
            .bot-message br {
                display: block;
                margin: 5px 0;
            }
            
            .bot-message strong {
                font-weight: bold;
            }

            .chat-message {
                max-width: 80%;
                padding: 10px 15px;
                border-radius: 10px;
                margin-bottom: 10px;
            }

            .user {
                background-color: #3498db;
                color: white;
                margin-left: auto;
            }

            .bot {
                background-color: #f0f0f0;
                margin-right: auto;
            }
        `;
        document.head.appendChild(messageStyle);
    </script>
</body>
</html>